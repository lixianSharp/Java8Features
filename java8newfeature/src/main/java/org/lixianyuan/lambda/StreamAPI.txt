筛选与切片
filter--接收 Lambda,从流中排除某些元素
limit--截断流，使元素不超过给定数量。
skip-- 跳远元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。若流中元素不足n个，则返回一个空流。与limit(n)互补。
distinct -- 筛选，通过流所生产元素的 hashCode() 和 equals() 去除重复元素。

映射
map -- 接收 Lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。
flatMap -- 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。

排序
sorted() --自然排序
sorted(Comparator com) -- 定制排序

allMatch --检查是否匹配所有元素
anyMatch -- 检查是否至少匹配一个元素
noneMatch -- 检查是否没有匹配所有元素
findFirst --返回第一个元素
findAny -- 返回当前流中任意元素
count -- 返回六中元素的总个数
max -- 返回流中最大值
min -- 返回流中最小值

规约
reduce(T identity, BinaryOperator) / reduce(BinaryOperator) --可以将流中元素反复结合起来，得到一个值
collect --- 将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法。

Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到List、Set、Map)。但是 Collectors 实用类提供
        了很多静态方法，可以方便的创建创建收集器实例

备注：map和reduce的连接通常被称为map-reduce模式，因Google用它来进行网络搜索而出名。


Optional 容器类的常用方法：
    Optional.of(T t): 创建一个Option实例。
    Optional.empty(): 创建一个空的Optional实例。
    Optional.ofNullable(T t): 若t不为null，创建Optional实例，否则创建空实例。
    isPresent():判断是否包含值。
    orElese(T t): 如果调用对象包含值，返回该值，否则返回t。
    orElseGet(Supplier s): 如果调用对象包含之，返回该值，否则返回s获取的值。
    map(Function f):如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()。
    flatMap(Function mapper):与map类似，要求返回值必须是Optional。